# coding=utf-8

import json
import llmQA as llmqa


def extract_json_content(text):
    start_index = text.find("{")
    end_index = text.rfind("}")

    if start_index != -1 and end_index != -1 and start_index < end_index:
        return text[start_index : end_index + 1]
    else:
        return None


def getmind(text):
    prompt = """给你以下一段文本，将该文本转化为一个树状图层次结构的思维导图数据，要求必须包含生成的节点name必须全覆盖该文本，且不能出现该文本之外的内容，不能改变原文本内容，生成形式为json,请注意 结果只要json格式，别的文字一切都不要 
                 文本：{document} 格式要求为：{{'name':'A','children':[{{'name':'B','children':[]}},"name":'C','children':[]}}]}} 
                 每个节点有name和children两个属性，name值必须为原文本内容，不得改变原文本内容，你只需要把文本结构化就行。
            "下面是一个实例，文本：‘第一章总则为进一步加强行政执法视音频记录工作，规范烟草专卖行政执法活动，维护公民、法人和其他组织的合法权益，促进严格规范公正文明执法，根据《烟草专卖行政处罚程序规定》《浙江省烟草专卖执法视音频记录工作规定》（浙烟专法〔2016〕41号）等有关规定，结合本市工作实际，制定本细则。’
    输出为:
    {{
    'name':"第一章总则",
    'children':[{{
                "name": "进一步加强行政执法视音频记录工作"
            }},
            {{
                "name": "规范烟草专卖行政执法活动"
            }},
            {{
                "name": "维护公民、法人和其他组织的合法                                                                权益"
            }},
            {{
                "···········································································································································································································································································································································································································································································································································································································································································································2"····································································································································································································································································: "促进严格规范公正文明执法"
            }},
            {{
                "name": "根据《烟草专卖行政处罚程序规定》《浙江省烟草专卖执法视音频记录工作规定》（浙烟专法〔2016〕41号）等有关规定"
            }},
            {{
                "name": "结合本市工作实际，结合本市工作实际，制定本细则。"
            }}]}}
    """.format(
        document=text
    )

    resp = llmqa.zhipuChat(prompt)

    # try:
    # resp = llmqa.chatmodel(prompt)
    # except:
    # resp = llmqa.zhipuChat(prompt)
    # print(resp)
    # print("\n")
    resp = resp.replace("\n", "")  # 替换换行符
    resp = resp.replace("\\", "")  # 替换转义符

    resp = resp.replace("```", "")  # 替换换行符
    resp = resp.replace("json", "")  # 替换换行符
    # print(resp)
    # resp = eval(resp)
    # # mindmap = {
    # #     "name": "文件",
    # #     "children": resp
    # # }
    # # # mindmap["children"].extend(resp)
    # # data = json.dumps(mindmap, ensure_ascii=False)
    # # with open("temp.json", "w",encoding='utf-8') as f:
    # #     f.write(data)
    # # print(mindmap)
    try:
        resp = extract_json_content(resp)
        json_resp = eval(resp)
    except:
        print(resp)
        json_resp = []
    return json_resp


if __name__ == "__main__":
    print(
        getmind(
            """第一章总则第四条 国务院和省、自治区、直辖市的烟草专卖行政主管部门职责及领导体制，依照《烟草专卖法》第四条的规定执行。设有烟草专卖行政主管部门的市、县，由市、县烟草专卖行政主管部门主管本行政区内的烟草专卖工作，受上一级烟草专卖行政主管部门和本级人民政府的双重领导，以上一级烟草专卖行政主管部门的领导为主。 """
        )
    )
